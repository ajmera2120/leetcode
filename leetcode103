binary tree zigzag level order traversal 


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        /***
        using linkedlist
        
        
        list=new ArrayList<>();
        levelOrder(list,root,0);
        return list;
        levelOrder(list,root,level);
        if(root==null):
             return;
        if(list.size()<=level):
            newLevel=new Linkedlist<>();
            list.add(newLevel);
        if(level%2==0):
            list.get(level).add(root.val);
        else
            list.get(level).add(0,root.val);
        levelOrder(list,root.left,level+1);
        levelOrder(list,root.right,level+1); 
        */
        List<List<Integer>> res = new ArrayList<>();
        if(root==null) return res;
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        boolean zigzag=false;
        while(!queue.isEmpty()){
            LinkedList<Integer>level=new LinkedList<>();
            int cnt = queue.size();
            for(int i=0;i<cnt;i++){
                TreeNode node=queue.poll();
                if(zigzag){
                    level.addFirst(node.val);
                }
                else{
                    level.add(node.val);
                }
                if(node.left != null){
                    queue.add(node.left);
                }
                if(node.right != null){
                    queue.add(node.right);
                }
            }
            res.add(level);
            zigzag = !zigzag;
        }
        return res;
    }
}
